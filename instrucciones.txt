instalacion a pasos

1. npm install -y
2. npm install webpack webpack-cli --save-dev
3. crear directorio src incluir index.js con el contenido

function component() {
  let element = document.createElement('div');

  // Lodash, currently included via a script, is required for this line to work
  element.innerHTML = _.join(['Hello', 'webpack'], ' ');

  return element;
}

document.body.appendChild(component());

4. crear index.html con el contenido

<!doctype html>
<html>
  <head>
    <title>Getting Started</title>
  </head>
  <body>
    
  </body>
</html>

editar el package.json e incluir

"private":true,

5. instalar dependencia lodash
npm install lodash --save

6. importamos lodash en nuestro inex.js
import _ from 'lodash';

7. cargamos el script index.js
<script src="main.js"></script>

8. ejecutamos webpack
npx webpack
Si funciona debemos ver el texto hello world

9. para evitar el uso de comandos cli creamos un fichero
webpack.config.js en raiz

10. incorporamos reglas al package.json

"build":"webpack" dentro de scripts

11. para ejecutar el proyecto cambiamos el comando anterior npx proyecto
npm run build

hasta aqui estaria estable el proyecto
=========================================


manejos de css

12. importamos el paquete de node

npm install --save-dev style-loader css-loader

13. creamos un fichero css
styles.css con

.hello{
    color:red;
}

14. en el index.js le añadimos la clase y el css

import './style.css';
element.classList.add('hello');

===========================================

manejo de imagenes

15: importamos el paquete de node

npm install --save-dev file-loader

16: Añadimos este trozo de codigo en el webpack.config.js

{
+         test: /\.(png|svg|jpg|gif)$/,
+         use: [
+           'file-loader'
+         ]
+       }




===========================================

manejo de fuentes

{
+         test: /\.(png|svg|jpg|gif)$/,
+         use: [
+           'file-loader'
+         ]
+       }


===========================================

manejo de ficheros xml y css los json estan integrados en webpack

npm install --save-dev csv-loader xml-loader

=============================================

plugin para generar un html

en webpack.config.js


const HtmlWebpackPlugin = require('html-webpack-plugin');

plugins: [
+     new HtmlWebpackPlugin({
+       title: 'Output Management'
+     })
+   ],


=============================================

limpiar la carpeta dist

npm install --save-dev clean-webpack-plugin

const CleanWebpackPlugin = require('clean-webpack-plugin');

en la seccion de plugins

new CleanWebpackPlugin(['dist']),


===============================================

modo watch

en scripts dentro package.json

"watch": "webpack --watch",

===============================================

recarga en vivo

npm install --save-dev webpack-dev-server

devServer: {
        contentBase: './dist'
    }

================================================

npm install --save-dev webpack-merge

===============================================

carga sass

npm install sass-loader node-sass webpack --save-dev


extraer css en archivos separados
npm install --save-dev mini-css-extract-plugin

minificar y optimizar

npm install --save-dev optimize-css-assets-webpack-plugin@4.0.0

npm install uglifyjs-webpack-plugin --save-dev


==============================================

actualizar version package.json al compilar en proyecto

npm install webpack-auto-inject-version --save-dev
